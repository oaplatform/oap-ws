name: oap-ws-sso
dependsOn = [
  oap
  oap-ws
  oap-ws-api-ws
  oap-ws-sso-api
  oap-ws-openapi-ws
  oap-mail
  oap-storage-mongo
]

services {
  oap-ws-sso-user-provider {
    implementation = oap.ws.sso.UserProvider
  }

  oap-ws-sso-token-extractor-server {
      implementation = oap.ws.sso.jwt.BasicJwtExtractor
      parameters {
          secret = <change me>
          issuer = <change me>
          roles = modules.oap-ws-sso-api.oap-ws-sso-roles
      }
    }

  oap-ws-sso-authenticator-server {
    implementation = oap.ws.sso.JwtUserAuthenticator
    parameters {
      userProvider =  modules.this.oap-ws-sso-user-provider
      jwtTokenGenerator = modules.oap-ws-sso-api.jwt-token-generator
      jwtExtractor = modules.this.oap-ws-sso-token-extractor-server
    }
  }

  oap-ws-sso-jwt-security-interceptor {
   profile = [
            ws-security
            jwt-support
    ]
   implementation = oap.ws.sso.interceptor.JWTSecurityInterceptor
   name = oap-ws-sso-jwt-security-interceptor
   parameters {
        jwtExtractor = modules.oap-ws-sso-api.oap-ws-sso-token-extractor
        userProvider = modules.this.oap-ws-sso-user-provider
        roles = modules.oap-ws-sso-api.oap-ws-sso-roles
   }
  }

  auth-ws {
    implementation = oap.ws.sso.ws.AuthWS
    parameters {
      authenticator = modules.this.oap-ws-sso-authenticator-server
      sessionManager = modules.oap-ws.session-manager
      roles = modules.oap-ws-sso-api.oap-ws-sso-roles
    }
    ws-service {
      path = auth
      sessionAware = true
      interceptors = [
        oap-ws-sso.oap-ws-sso-jwt-security-interceptor
        oap-ws-sso-api.oap-ws-sso-throttle-login-interceptor
      ]
    }
  }

  organization-storage.implementation = oap.ws.sso.OrganizationStorage

    organization-persistence {
      implementation = oap.storage.MongoPersistence
      parameters {
        mongoClient: modules.oap-storage-mongo.mongo-client
        collectionName = organizations
        delay = 1m
        storage = modules.this.organization-storage
        watch = true
        crashDumpPath = <change me>
      }
      supervision.supervise = true
    }

    user-storage.implementation = oap.ws.sso.UserStorage

    user-persistence {
      implementation = oap.storage.MongoPersistence
      parameters {
        mongoClient = modules.oap-storage-mongo.mongo-client
        collectionName = users
        delay = 1m
        storage = modules.this.user-storage
        watch = true
        crashDumpPath = <change me>
      }
      supervision.supervise = true
    }

    account-mailman {
      implementation = oap.ws.sso.AccountMailman
      parameters {
        mailman: modules.oap-mail.oap-mail-mailman
        accounts: modules.this.accounts
      }
    }

    accounts {
      implementation = oap.ws.sso.AccountsService
      parameters {
        organizationStorage = modules.this.organization-storage
        userStorage = modules.this.user-storage
      }
    }

    organization-ws {
      implementation = oap.ws.sso.ws.OrganizationWS
      parameters {
        accounts = modules.this.accounts
        mailman = modules.this.account-mailman
        roles = modules.oap-ws-sso-api.oap-ws-sso-roles
        selfRegistrationEnabled = true
      }
      ws-service {
        path = organizations
        sessionAware = true
        interceptors = [
          oap-ws-sso-api.oap-ws-sso-api-key-interceptor
          oap-ws-sso.oap-ws-sso-jwt-security-interceptor
        ]
      }
    }

    user-ws {
      implementation = oap.ws.sso.ws.UserWS
      parameters {
        roles = modules.oap-ws-sso-api.oap-ws-sso-roles
        accounts = modules.this.accounts
        organizationWS = modules.this.organization-ws
      }
      ws-service {
        path = user
        sessionAware = true
        interceptors = oap-ws-sso.oap-ws-sso-jwt-security-interceptor
      }
    }

    openapi {
      implementation = oap.ws.openapi.Openapi
      parameters {
        webServices = modules.oap-ws.oap-ws-webservices
        info = modules.oap-ws-openapi-ws.openapi-info
      }
    }

    openapi-ws {
      implementation = oap.ws.openapi.OpenapiWS
      parameters {
        openapi = modules.this.openapi
      }
      ws-service.path = system/openapi
    }

    xenoss-account-user-storage-metrics {
       profile = prometheus
       implementation = oap.storage.StorageMetrics
       parameters {
         storage = modules.this.user-storage
         name = "xenoss-account.users"
       }
  }

    xenoss-account-org-storage-metrics {
           profile = prometheus
           implementation = oap.storage.StorageMetrics
           parameters {
             storage = modules.this.organization-storage
             name = "xenoss-account.organizations"
           }
       }

    basic-jwt-token-extractor {
      implementation = oap.ws.sso.jwt.BasicJwtExtractor
      parameters {
          secret = <change me>
          issuer = <change me>
          roles = modules.oap-ws-sso-api.oap-ws-sso-roles
      }
    }
}
